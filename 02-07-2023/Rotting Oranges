class Triplet{
    int row;
    int col;
    int time;
    Triplet(int row, int col, int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int fresh=0;
        int rotten=0;
        Queue<Triplet> q = new LinkedList<>();
        int n=grid.length;
        int m=grid[0].length;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==2){
                    q.add(new Triplet(i,j,0));
                }
                else{
                }
            }
        }
        int[] drow={-1,0,1,0};
        int[] dcol = {0,1,0,-1};
        int time=0;
        while(!q.isEmpty()){
            Triplet tmp = q.remove();
            time=tmp.time;
            for(int i=0; i<4; i++){
                int r = tmp.row + drow[i];
                int c = tmp.col + dcol[i];
                if(r>-1 && c>-1 && r<n && c<m && grid[r][c]!=2 && grid[r][c]==1){
                    grid[r][c]=2;
                    q.offer(new Triplet(r,c,time+1));
                }
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]!=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        return time;
    }
}
